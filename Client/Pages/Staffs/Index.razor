@page "/staffs/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject NavigationManager _navManager
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3 class="card-title">Staff Profile</h3>
<br />

<a href="/staffs/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Staff
</a>
<br />
<br />

@if (Staffs == null)
{
    <div class="alert alert-info">Loading Staffs...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>FirstName</th>
                <th>LastName</th>
                <th>Gender</th>
                <th>Email</th>
                <th>Contact</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Staff in Staffs)
            {
            <tr>
                <td>@Staff.FirstName</td>
                <td>@Staff.LastName</td>
                <td>@Staff.Gender</td>
                <td>@Staff.Email</td>
                <td>@Staff.Contact</td>
                <td>
                    <a href="/staffs/view/@Staff.Id" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                    <a href="/staffs/edit/@Staff.Id" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                    <button class="btn btn-danger" @onclick="@(()=>Delete(Staff.Id))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Staff> Staffs;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
    }

    async Task Delete(int StaffId)
    {
        var Staff = Staffs.First(q => q.Id == StaffId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {Staff.FirstName}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.StaffsEndpoint}/{StaffId}");
            await OnInitializedAsync();
        }
    }
    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}

@page "/sellorders/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject NavigationManager _navManager
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3 class="card-title">SellOrder</h3>
<br />

<a href="/sellorders/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Product
</a>
<br />
<br />

@if (SellOrders == null)
{
    <div class="alert alert-info">Loading SellOrders...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>OrderDate</th>
                <th>OrderTime</th>
                <th>DeliverType</th>
                <th>StaffId</th>
                <th>CustomerId</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var SellOrder in SellOrders)
            {
            <tr>
                <td>@SellOrder.OrderDate</td>
                <td>@SellOrder.OrderTime</td>
                <td>@SellOrder.DeliveryType</td>
                <td>@SellOrder.StaffId</td>
                <td>@SellOrder.CustomerId</td>
                <td>
                    <a href="/sellorders/view/@SellOrder.Id" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                    <a href="/sellorders/edit/@SellOrder.Id" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                    <button class="btn btn-danger" @onclick="@(()=>Delete(SellOrder.Id))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<SellOrder> SellOrders;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        SellOrders = await _client.GetFromJsonAsync<List<SellOrder>>($"{Endpoints.SellOrdersEndpoint}");
    }

    async Task Delete(int SellOrderId)
    {
        var SellOrder = SellOrders.First(q => q.Id == SellOrderId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {SellOrder.Id}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.SellOrdersEndpoint}/{SellOrderId}");
            await OnInitializedAsync();
        }
    }
    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}

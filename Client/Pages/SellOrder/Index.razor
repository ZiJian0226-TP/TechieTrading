@page "/SellOrder/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">SellOrder Profile</h3>

@if (SellOrders == null)
{
    <div class="alert alert-info">Loading SellOrders...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>OrderDate</th>
                <th>OrderTime</th>
                <th>DeliverType</th>
                <th>StaffId</th>
                <th>CustomerId</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var SellOrder in SellOrders)
            {
                <tr>
                    <td>@SellOrder.Id</td>
                    <td>
                        <a href="/SellOrders/view/@SellOrder.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/SellOrders/edit/@SellOrder.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(SellOrder.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    protected List<SellOrder> SellOrders;

    protected async override Task OnInitializedAsync()
    {
        SellOrders = await _client.GetFromJsonAsync<List<SellOrder>>($"{Endpoints.SellOrderEndpoint}");
    }

    async Task Delete(int SellOrderId)
    {
        var SellOrder = SellOrders.First(q => q.Id == SellOrderId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {SellOrder.Id}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.SellOrderEndpoint}/{SellOrderId}");
            await OnInitializedAsync();
        }
    }
}

@page "/Customer/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Customer Profile</h3>

@if (Customers == null)
{
    <div class="alert alert-info">Loading Customers...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>FirstName</th>
                <th>LastName</th>
                <th>Gender</th>
                <th>Email</th>
                <th>Contact</th>
                <th>DateOfBirth</th>
                <th>Address</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Customer in Customers)
            {
                <tr>
                    <td>@Customer.FirstName</td>
                    <td>
                        <a href="/Customers/view/@Customer.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/Customers/edit/@Customer.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(Customer.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    protected List<Customer> Customers;

    protected async override Task OnInitializedAsync()
    {
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomerEndpoint}");
    }

    async Task Delete(int CustomerId)
    {
        var Customer = Customers.First(q => q.Id == CustomerId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {Customer.FirstName}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.CustomerEndpoint}/{CustomerId}");
            await OnInitializedAsync();
        }
    }
}
